# Network card drivers
The netcard abstration layer is contained in netcard.c. 

When the OS boots, net_init() is called. This function
iterates through the PCI bus's devices to find all devices
that match one of the OS's netcard drivers. For each netcard
found, a struct NetworkCard is instanciated. The structure
contains several function pointers that are initialized with 
the matching driver's functions. For example, NetworkCard::receive
would be set to &rtl8139_receive if the netcard was a rtl8139.
Each of these NetworkCard instances will be refered to as the
"netcard implementation"

Only the rtl8139 driver is implemented right now.

When a netcard IRQ occurs, a softIRQ is scheduled. When the
softIRQ handler is invoked, it calls net_process(). net_process()
iterates through all netcard that was discovered during boot.
It then checks if data is available and forwards the the data
up to the TCP/IP stack if the data is an IP packet, or to the
ICMP stack if the packet is of the ICMP type.

#TCP/IP stack
##Receiving data
The ICMP handler responds immediately to ping requests. Therefore
the ICMP response is sent from the softIRQ thread. This allows
consistent RTT. The IP handler forwards the message to the TCP or 
UDP handlers. The UDP handler is not implemented yet. The TCP 
handler forwards segments to active sockets by finding the socket 
listening to the port and ip of the message. This is done by by
finding the socket instance within a hash list. The message is added 
in the socket's queue. The user thread is then responsible for 
dequeuing those messages.

##Sending data
The netcard abstraction's net_send() function locks
the netcard implementation's send spinlock. This way, only
one thread can send to one given netcard at the same time.

net_send() takes an interface index as destination parameter.
ip_send takes an ip address as destination parameter. ip_send
invokes ip_routing_route() to determine on what netcard
to send the message based the destination address.

net_send() will send 1 frame of maximum MTU size. It returns 0 if sending failed 
or size of frame if sending suceeded. Frames are guaranteed to be sent in full or
not at all but never partly.

ip_send() will send a packet of maximum 65536 bytes. It will do ip fragmentation
in order to send frames of appropriate size.

tcp_send() will send 1 segment of maximum 64k. This means that the underlying 
ip_send() can end up calling net_send several times. 

###Problem
There is actually a design flaw with tcp_send right now. Sending data on a socket 
will end up in netcard_send being called from the user thread. The call is thus blocking. 

Also, If net_send() returns 0, because of HW buffer overflow, then ip_send will return the 
number of bytes sent. But tcp_send should not attempt to send the rest of the data
because the IP protocol expects the rest of the packet.

#Blocking operations
All socket operations such as connect, accept, send, receive and close are 
non-blocking. This implies that the lower-level layer operations are non-blocking
also. There are some exceptions to this, but only because there are design flaws
that need to be addressed.

##Problem:
Upon connecting a socket, ARP discovery and DNS resolution might need to be 
performed. DNS resolution will be left to the user to do. connect() will require an 
IP address. Upon connect, the socket will be placed in "arp discovery" state. The MAC
address will be fetched from the cache or a discovery will be sent. Upon receiving an
ARP reply, or any other ARP cache entry addition, the stack will search through the
socket list for sockets that are waiting for that entry. The connection will then be 
resumed. Once the an ARP entry is found for a socket, it will be saved in the socket 
and reused for all remaining transmission.

#Locking
At any time, only two threads can access the tcp/ip stack: The softIRQ thread, 
for processing incomming frames, and the owner of the socket. If multiple
threads want to share socket usage, they will have to implement their own
locking mechanism. The tcp/ip stack will only guarantee thread safety between
the two threads mentioned above. Sockets should be used by one thread only in 
a user application. Two different sockets can be used by two different threads
at the same time though.

##net_send() locking
net_send() is used by the softIRQ context and user threads. Since
the softIRQ context has high priority, it means that if a thead
is preempted while it was holding the netcard's send spinlock, and 
then the softIRQ attempts to request the lock, a deadlock might occur.
On uni-CPU systems, a deadlock would occur because the softIRQ will
never give CPU time to other threads until it has completed its work.
This could also happen on systems where the number of netcard is 
greater than or equal to the number of CPUs.

To solve this problem, the spinlock will disable interrupts.
    - Spinlock will prevent another CPU from accessing the send function
    - The thread would not be preempted on the local CPU so there is no chances
      that a softIRQ would deadlock (since softIRQ are prioritized over that
      thread, it could continue to run and never give time to the thread to
      release the lock).
    - On a single-CPU system, the interrupt cleared and spinlock would be
      redundant but would not cause a problem


##Socket locking
No locking is currently done at the socket level. The following is a list
of problems that would arise, and the associated solution

###Problem 1
    1) Make sure a thread does not delete its socket while softIRQ is using it.
    2) A thread might want to get the seqnumber while the softirq is modifying it.
    3) A thread might read in the receive queue while softIRQ is writing in it
    
Solution
??????

###Problem 2
Make sure that only one consumer at a time can append/remove from the socket list.

Solution
The hash list is thread safe so it should already be handled correctly.
But more tests need to be done because there is a little more to it than
just accessing the hash list.
      

###Problem 3
Socket backlog list might get accessed by softIRQ and owning thread

Solution
??????

#Accepting incomming connections      
A socket is created using create_socket(). Then the socket is placed in listening 
mode with listen(). listen() will set the source ip/port of the socket as per 
parameters of the function and destination ip/port to 0. A backlog buffer is created 
with size=(sizeof(socket*)*backlogCount).

When a segment is processed by tcp_process (in softirq context), a socket will try 
to be matched. If no socket is found then tcp_process() will try to find a listening 
socket that uses the same source ip/port (matching the received segment's destination
fields) and with destination ip/port set to 0. if a socket is found, then we know 
that this segment is for an incomming connection.

The listening socket will only process SYN segments and will ignore any other 
segments. When processing a SYN segment, it will create a new socket with the same 
source ip/port and with destination ip/port matching the source of the incomming 
segment. The state will be set to CONNECTING. The new pending socket will be saved 
in the listening socket's backlog. The new socket will stay in the backlog until it 
gets picked up by accept(). accept() will then move the socket to the main list. The 
socket created in the backlog is only temporary. accept() will create a new socket 
instance based on that socket so that the new instance will reside in the accepting
process's heap.

When the accept function is called, it will go through the backlog of the listening 
socket and will finish creating the socket. It will clone the socket and create the 
receive buffer and send the syn/ack. The socket will stay in "CONNECTING" state until 
it receives the ack of the syn/ack accept will move the socket from the backlog to 
the main list.

      
      
#Links
http://www.tldp.org/HOWTO/KernelAnalysis-HOWTO-8.html
http://www.cubrid.org/blog/dev-platform/understanding-tcp-ip-network-stack/
http://1.bp.blogspot.com/_Y6kJq_O7xJw/So8Vg9IQJXI/AAAAAAAAADo/G5Jk-Cjadto/s1600-h/TCP_Ingress_Queuing.png

